package com.github.bosgalo.db;

import com.github.bosgalo.JdbcConnection;

import java.sql.Connection;
import java.sql.SQLException;

public class InitDatabase {

    private Connection connection;

    public InitDatabase() {
        try {
            connection = new JdbcConnection().getConnection();
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    public void initDb() {
        try {
            String createXssScannerResults = "CREATE TABLE IF NOT EXISTS xss_scanner_results (" +
                    "  id           INT          NOT NULL PRIMARY KEY AUTO_INCREMENT," +
                    "  url          VARCHAR(255) NOT NULL," +
                    "  payload_url  VARCHAR(255)," +
                    "  method       VARCHAR(25)," +
                    "  isVulnerable BOOLEAN" +
                    ")";
            String createFormPayloads = "CREATE TABLE IF NOT EXISTS form_payloads (" +
                    "  id         INT NOT NULL PRIMARY KEY AUTO_INCREMENT," +
                    "  input_name VARCHAR(255)," +
                    "  payload    VARCHAR(255)" +
                    ")";
            String createResultPayloadMap = "CREATE TABLE IF NOT EXISTS result_payload_map (" +
                    "  result_id  INT NOT NULL," +
                    "  payload_id INT NOT NULL," +
                    "  PRIMARY KEY (`result_id`, `payload_id`)," +
                    "  CONSTRAINT res_id_fk FOREIGN KEY (result_id) REFERENCES xss_scanner_results (`id`)," +
                    "  CONSTRAINT pl_id_fk FOREIGN KEY (payload_id) REFERENCES form_payloads (`id`)" +
                    ")";
            String createCrawler = "CREATE TABLE IF NOT EXISTS crawler (id INT NOT NULL PRIMARY KEY AUTO_INCREMENT, " +
                    "URL VARCHAR(255))";
            connection.createStatement().execute(createXssScannerResults);
            connection.createStatement().execute(createFormPayloads);
            connection.createStatement().execute(createResultPayloadMap);
            connection.createStatement().execute(createCrawler);
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    public void clearDb() {
        try {
            String dropCrawler = "DROP TABLE IF EXISTS vuln_scanner.crawler";
            String dropFkPl = "ALTER TABLE vuln_scanner.result_payload_map DROP FOREIGN KEY pl_id_fk";
            String dropFkRes = "ALTER TABLE vuln_scanner.result_payload_map DROP FOREIGN KEY res_id_fk";
            String dropRPM = "DROP TABLE IF EXISTS vuln_scanner.result_payload_map";
            String dropRes = "DROP TABLE IF EXISTS vuln_scanner.xss_scanner_results";
            String dropPl = "DROP TABLE IF EXISTS vuln_scanner.form_payloads";
            connection.createStatement().execute(dropCrawler);
            connection.createStatement().execute(dropFkPl);
            connection.createStatement().execute(dropFkRes);
            connection.createStatement().execute(dropRPM);
            connection.createStatement().execute(dropRes);
            connection.createStatement().execute(dropPl);
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }
}
