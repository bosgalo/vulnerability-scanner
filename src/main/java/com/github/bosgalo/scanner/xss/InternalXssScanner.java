package com.github.bosgalo.scanner.xss;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class InternalXssScanner {

    private final String maliciousJs = "alert('XSS FOUNDED!')";

    private String url;

    public InternalXssScanner(String url) {
        this.url = url;
    }

    public void start() {
        Connection connection = Jsoup.connect(url);
        getForms(connection);
    }

    private void getForms(Connection connection) {
        Document document = getDocument(connection);
        if (Objects.nonNull(document)) {

            Elements forms = document.getElementsByTag("form");
            forms.forEach(form -> {
                Attributes formAttributes = form.attributes();
                String formMethod = formAttributes.get("method").toLowerCase();
                String formAbsActionUrl = form.absUrl("action");

                HashMap<String, String> inputNameData = new HashMap<>();

                form.getElementsByTag("input").forEach(input -> {
                    Attributes inputAttributes = input.attributes();
                    String inputName = inputAttributes.get("name");
                    String inputType = inputAttributes.get("type").toLowerCase();
                    String payloadData = getPayloadData(inputType);
                    if (!inputName.isEmpty() || !payloadData.isEmpty()) {
                        inputNameData.put(inputName, payloadData);
                    }
                });

                if (formMethod.contains("get")) {
                    try {
                        Connection.Response response = connection
                                .url(formAbsActionUrl)
                                .method(Connection.Method.GET)
                                .data(inputNameData)
                                .execute();
                        System.out.println("Sended. Method: get, url: " + formAbsActionUrl);
                        showAlert(response, formAbsActionUrl, inputNameData, "GET");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else if (formMethod.contains("post")) {
                    try {
                        Connection.Response response = connection
                                .url(formAbsActionUrl)
                                .method(Connection.Method.POST)
                                .data(inputNameData)
                                .execute();
                        System.out.println("Sended. Method: post, url: " + formAbsActionUrl);
                        showAlert(response, formAbsActionUrl, inputNameData, "POST");
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });
        }
    }

    private void showAlert(Connection.Response response, String url, Map<String, String> map, String method) {
        try {
            response.parse()
                    .getAllElements()
                    .stream()
                    .findFirst()
                    .ifPresent(element -> {
                        if (element.data().contains(maliciousJs)) {
                            System.out.println("URL: " + url);
                            System.out.println("Method: " + method);
                            map.forEach((name, data) -> System.out.println("Input name: " + name + "\nPayload: " + data));
                        }
                    });
        } catch (IOException e) {
            throw new RuntimeException();
        }
    }

    private String getPayloadData(String inputType) {
        if (inputType.contains("text")) return "<script>" + maliciousJs + "</script>";
//        if (inputType.contains("button") || inputType.contains("hidden") || inputType.contains("submit") ||
//                inputType.contains("file") || inputType.contains("image") || inputType.contains("reset"))
        return "";
    }

    private Document getDocument(Connection connect) {
        Document document = null;
        try {
            document = connect.get();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return document;
    }
}
