package com.github.bosgalo.scanner.xss;

import com.github.bosgalo.JdbcConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class XssScannerDAO {

    private Connection connection = null;

    public XssScannerDAO() {
        try {
            connection = new JdbcConnection().getConnection();
        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
    }

    public void scan(String url) {
        XssScanner xssScanner = new XssScanner(url);
        List<XssScannerResult> xssScannerResults = xssScanner.scan();
        try {
            for (XssScannerResult xssScannerResult : xssScannerResults) {
                int scannerResultId = insertScannerResult(xssScannerResult);
                List<Integer> formPayloadIds = insertFormPayloads(xssScannerResult);
                mapResultPayload(scannerResultId, formPayloadIds);
            }
        } catch (SQLException e) {
            throw new IllegalArgumentException(e);
        }
    }

    public List<XssScannerResult> getScanResults() {
        return getXssScannerResults();
    }

    private List<XssScannerResult> getXssScannerResults() {
        List<XssScannerResult> xssScannerResults = new ArrayList<>();
        try {
            String sql = "SELECT * FROM xss_scanner_results";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            ResultSet resultSet = preparedStatement.executeQuery();

            while (resultSet.next()) {
                int xssScannerResultId = resultSet.getInt("id");
                List<FormPayload> formPayloads = getFormPayloads(xssScannerResultId);
                String url = resultSet.getString("url");
                String payloadUrl = resultSet.getString("payload_url");
                String method = resultSet.getString("method");
                boolean isVulnerable = resultSet.getBoolean("isVulnerable");
                xssScannerResults.add(new XssScannerResult(url, payloadUrl, method, formPayloads, isVulnerable));
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e);
        }
        return xssScannerResults.stream()
                .sorted(Collections.reverseOrder((o1, o2) -> Boolean.valueOf(o1.isVulnerable()).compareTo(o2.isVulnerable())))
                .collect(Collectors.toList());
    }

    private List<FormPayload> getFormPayloads(int xssScannerResultId) throws SQLException {
        String sql = "SELECT `form_payloads`.* " +
                "FROM `form_payloads` " +
                "JOIN `result_payload_map` " +
                "ON `form_payloads`.`id` = `result_payload_map`.`payload_id` " +
                "WHERE result_payload_map.result_id = ?";
        PreparedStatement preparedStatement = connection.prepareStatement(sql);

        preparedStatement.setInt(1, xssScannerResultId);

        ResultSet formPayloadsResultSet = preparedStatement.executeQuery();

        List<FormPayload> formPayloads = new ArrayList<>();
        while (formPayloadsResultSet.next()) {
            String inputName = formPayloadsResultSet.getString("input_name");
            String payload = formPayloadsResultSet.getString("payload");
            formPayloads.add(new FormPayload(inputName, payload));
        }
        return formPayloads;
    }

    private void mapResultPayload(int scannerResultId, List<Integer> formPayloadIds) throws SQLException {
        String sql = "INSERT INTO result_payload_map(result_id, payload_id) VALUES (?,?)";
        for (Integer formPayloadId : formPayloadIds) {
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, scannerResultId);
            preparedStatement.setInt(2, formPayloadId);
            preparedStatement.execute();
        }
    }

    private List<Integer> insertFormPayloads(XssScannerResult xssScannerResult) throws SQLException {
        String insertFromPayload = "INSERT INTO form_payloads(input_name, payload) VALUES (?,?)";
        List<Integer> ids = new ArrayList<>();
        for (FormPayload formPayload : xssScannerResult.getFormPayloads()) {
            PreparedStatement preparedStatement = connection.prepareStatement(insertFromPayload, Statement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, formPayload.getInputName());
            preparedStatement.setString(2, formPayload.getPayload());
            preparedStatement.executeUpdate();
            ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
            generatedKeys.first();
            ids.add(generatedKeys.getInt(1));
        }
        return ids;
    }

    private int insertScannerResult(XssScannerResult xssScannerResult) throws SQLException {
        String insertResult = "INSERT INTO xss_scanner_results(url, payload_url, method, isVulnerable) VALUES (?,?,?,?)";
        PreparedStatement preparedStatement = connection.prepareStatement(insertResult, Statement.RETURN_GENERATED_KEYS);
        if (Objects.nonNull(xssScannerResult.getDestinationUrl()))
            preparedStatement.setString(1, xssScannerResult.getDestinationUrl());

        if (Objects.nonNull(xssScannerResult.getPayloadUrl()))
            preparedStatement.setString(2, xssScannerResult.getPayloadUrl());

        if (Objects.nonNull(xssScannerResult.getMethod()))
            preparedStatement.setString(3, xssScannerResult.getMethod());

        preparedStatement.setBoolean(4, xssScannerResult.isVulnerable());

        preparedStatement.executeUpdate();
        ResultSet generatedKeys = preparedStatement.getGeneratedKeys();
        generatedKeys.first();
        return generatedKeys.getInt(1);
    }
}
