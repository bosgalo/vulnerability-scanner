package com.github.bosgalo.scanner.xss;

import com.github.bosgalo.cliutil.ConsoleUtils;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class XssVulnerabilityScanner {

    public void start() throws IOException {
        Connection connection = Jsoup.connect("http://192.168.0.105:8082/vuln");

        String maliciousJs = "alert('test')";

        Document document = getDocument(connection);

        Set<String> nameAttributeValues = findInputs(document);

        injectJsInInputs(connection, maliciousJs, nameAttributeValues);

        findInternalXssVulnerability(connection, maliciousJs);
    }

    private void findInternalXssVulnerability(Connection connection, String maliciousJs) {
        Document document = getDocument(connection);
        document.getAllElements()
                .stream()
                .findFirst()
                .ifPresent(element -> {
                    if (element.data().contains(maliciousJs)) try {
                        System.out.println();
                        System.out.println(ConsoleUtils.Color.blue("XSS scanner started..."));
                        String baseUri = connection.get().baseUri();
                        System.out.println(baseUri.substring(0, baseUri.indexOf("?")) + ConsoleUtils.Color.red(" have a internal xss vulnerability"));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                });
    }

    private void injectJsInInputs(Connection connection, String maliciousJs, Set<String> nameAttributeValues) {
        nameAttributeValues.forEach(value -> {
            try {
                connection
                        .method(Connection.Method.POST)
                        .data(value, "<script>" + maliciousJs + "</script>")
                        .execute();
                System.out.println("IN " + connection.get().baseUri() + " IN INPUT WITH ATTRIBUTE NAME " + ConsoleUtils.Color.cyan(value) + " INJECTED SCRIPT: " + ConsoleUtils.Color.red(maliciousJs));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private Set<String> findInputs(Document document) {
        HashSet<String> nameAttributeValues = new HashSet<>();
        Elements inputs = document.getElementsByTag("input");
        inputs.forEach(input -> nameAttributeValues.add(input.attributes().get("name")));
        return nameAttributeValues;
    }

    private Document getDocument(Connection connect) {
        Document document = null;
        try {
            document = connect.get();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return document;
    }
}
