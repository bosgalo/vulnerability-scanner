package com.github.bosgalo.scanner.xss;

import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Objects;

public class XssScanner {

    private String xssPayloadOpen;
    private String xssPayloadBody;
    private String xssPayloadEnd;

    private Connection connection;

    public XssScanner(String url) {
        connection = Jsoup.connect(url);
        xssPayloadOpen = "<script>";
        xssPayloadEnd = "</script>";
        xssPayloadBody = "alert('XSS!')";
    }

    public XssScanner(String url, String xssPayloadOpen, String xssPayloadBody, String xssPayloadEnd) {
        connection = Jsoup.connect(url);
        this.xssPayloadOpen = xssPayloadOpen;
        this.xssPayloadBody = xssPayloadBody;
        this.xssPayloadEnd = xssPayloadEnd;
    }

    public XssScannerResult scan() {
        Document document = getDocument(connection);

        final XssScannerResult[] xssScannerResult = new XssScannerResult[1];

        if (Objects.nonNull(document)) {
            Elements forms = document.getElementsByTag("form");
            forms.forEach(form -> {
                Attributes formAttributes = form.attributes();
                String formMethod = formAttributes.get("method").toLowerCase();
                String formAbsActionUrl = form.absUrl("action");

                HashMap<String, String> inputNameData = getFormInputNameData(form);

                if (formMethod.contains("get")) {
                    Connection.Response response = sendPayload(formAbsActionUrl, inputNameData, Connection.Method.GET);
                    xssScannerResult[0] = createResult(document.location(), formAbsActionUrl, inputNameData, response, "get");
                } else if (formMethod.contains("post")) {
                    Connection.Response response = sendPayload(formAbsActionUrl, inputNameData, Connection.Method.POST);
                    xssScannerResult[0] = createResult(document.location(), formAbsActionUrl, inputNameData, response, "post");
                } else {
                    xssScannerResult[0] = new XssScannerResult(document.location(), false);
                }
            });
        }
        return xssScannerResult[0];
    }

    private XssScannerResult createResult(String destinationUrl, String formAbsActionUrl, HashMap<String, String> inputNameData,
                                          Connection.Response response, String method) {
        boolean vulnerable = isVulnerable(response);
        if (vulnerable) {
            ArrayList<FormPayload> formPayloads = new ArrayList<>();
            inputNameData.forEach((name, data) -> formPayloads.add(new FormPayload(name, data)));
            return new XssScannerResult(destinationUrl, formAbsActionUrl, method, formPayloads, true);
        } else return new XssScannerResult(destinationUrl, formAbsActionUrl, method, false);

    }

    private HashMap<String, String> getFormInputNameData(Element form) {
        HashMap<String, String> inputNameData = new HashMap<>();

        form.getElementsByTag("input").forEach(input -> {
            Attributes inputAttributes = input.attributes();
            String inputName = inputAttributes.get("name");
            String inputType = inputAttributes.get("type").toLowerCase();

            String payloadData = getPayloadData(inputType);
            if (!inputName.isEmpty() || !payloadData.isEmpty()) {
                inputNameData.put(inputName, payloadData);
            }
        });
        return inputNameData;
    }

    private Connection.Response sendPayload(String formAbsActionUrl,
                                            HashMap<String, String> inputNameData, Connection.Method method) {
        try {
            return connection
                    .url(formAbsActionUrl)
                    .method(method)
                    .data(inputNameData)
                    .execute();
//            System.out.println("Sended. Method: " + method.name() + ", url: " + formAbsActionUrl);
        } catch (IOException e) {
            throw new IllegalStateException(e);
        }
    }

    private boolean isVulnerable(Connection.Response response) {
        final boolean[] isVulnerable = new boolean[1];
        try {
            response.parse()
                    .getAllElements()
                    .stream()
                    .findFirst()
                    .ifPresent(element -> isVulnerable[0] = element.data().contains(xssPayloadBody));
            return isVulnerable[0];
        } catch (IOException e) {
            throw new RuntimeException();
        }
    }

    private String getPayloadData(String inputType) {
        if (inputType.contains("text")) return xssPayloadOpen + xssPayloadBody + xssPayloadEnd;
        return "";
    }

    private Document getDocument(Connection connect) {
        Document document = null;
        try {
            document = connect.get();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return document;
    }
}
